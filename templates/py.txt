from flask import Flask,render_template,request,session,redirect,url_for,flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from werkzeug.security import generate_password_hash,check_password_hash
from flask_login import login_user,logout_user,login_manager,LoginManager
from flask_login import login_required,current_user
import json

# MY db connection
local_server= True
app = Flask(__name__)
app.secret_key='Shri'


# this is for getting unique user access student
login_manager=LoginManager(app)
login_manager.login_view='login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))



# app.config['SQLALCHEMY_DATABASE_URL']='mysql://username:password@localhost/cropm'
app.config['SQLALCHEMY_DATABASE_URI']='mysql://root:@localhost/cropm'
db=SQLAlchemy(app)

# here we will create db models that is tables
class Test(db.Model):
    id=db.Column(db.Integer,primary_key=True)
    name=db.Column(db.String(100))
    email=db.Column(db.String(100))

class fertilizer(db.Model):
    fid=db.Column(db.Integer,primary_key=True)
    fertilizer=db.Column(db.String(100))

class Available(db.Model):
    cropid=db.Column(db.Integer,primary_key=True)
    availability=db.Column(db.Integer())

class Trig(db.Model):
    tid=db.Column(db.Integer,primary_key=True)
    cropid=db.Column(db.String(100))
    action=db.Column(db.String(100))
    timestamp=db.Column(db.String(100))


class User(UserMixin,db.Model):
    id=db.Column(db.Integer,primary_key=True)
    username=db.Column(db.String(50))
    email=db.Column(db.String(50),unique=True)
    password=db.Column(db.String(1000))

class Add Products(db.Model):
    username=db.Column(db.String(50))
    email=db.Column(db.String(50))
    pid=db.Column(db.Integer,primary_key=True)
    productname=db.Column(db.String(100))
    productdesc=db.Column(db.String(300))
    price=db.Column(db.Integer)





class Crop(db.Model):
    cropid=db.Column(db.Integer,primary_key=True)
    cropname=db.Column(db.String(50))
    availability=db.Column(db.Integer)
    type=db.Column(db.String(50))
    fertilizer=db.Column(db.String(50))
    email=db.Column(db.String(50))
    number=db.Column(db.String(12))
    address=db.Column(db.String(100))
    

@app.route('/')
def index(): 
    return render_template('index.html')

@app.route('/cropdetails')
def scropdetails():
    query=db.engine.execute(f"SELECT * FROM `crop`") 
    return render_template('cropdetails.html',query=query)
@app.route('/products')
def products():
    query=db.engine.execute(f"SELECT * FROM `addagroproducts`") 
    return render_template('agroproducts.html',query=query)
@app.route('/product',methods=['POST','GET'])
@login_required
def product():
    if request.method=="POST":
        username=request.form.get('username')
        email=request.form.get('email')
        productname=request.form.get('productname')
        productdesc=request.form.get('productdesc')
        price=request.form.get('price')
        products=Addagroproducts(username=username,email=email,productname=productname,productdesc=productdesc,price=price)
        db.session.add(products)
        db.session.commit()
        flash("Product Added","info")
        return redirect('/agroproducts')
   
    return render_template('addagroproducts.html')


@app.route('/triggers')
def triggers():
    query=db.engine.execute(f"SELECT * FROM `trig`") 
    return render_template('triggers.html',query=query)

@app.route('/fertilzer',methods=['POST','GET'])
def fertilizer():
    if request.method=="POST":
        dept=request.form.get('dept')
        query=fertilizer.query.filter_by(branch=dept).first()
        if query:
            flash("This Fertilizer Already Exist","warning")
            return redirect('/fertilizer')
        dep=fertilizer(branch=dept)
        db.session.add(dep)
        db.session.commit()
        flash("Fertilizer Added","success")
    return render_template('fertilizer.html')

@app.route('/addavailability',methods=['POST','GET'])
def addavailability():
    query=db.engine.execute(f"SELECT * FROM `crop`") 
    if request.method=="POST":
        rollno=request.form.get('cropid')
        attend=request.form.get('availability')
        print(availability,cropid)
        atte=availability(cropid=cropid,availability=availability)
        db.session.add(atte)
        db.session.commit()
        flash("Record added","warning")

        
    return render_template('percent.html',query=query)
    

@app.route('/search',methods=['POST','GET'])
def search():
    if request.method=="POST":
        cropid=request.form.get('id')
        bio=Student.query.filter_by(cropid=cropid).first()
        attend=Availabilty.query.filter_by(cropid=cropid).first()
        return render_template('search.html',bio=bio,attend=attend)
        
    return render_template('search.html')

@app.route("/delete/<string:id>",methods=['POST','GET'])
@login_required
def delete(id):
    db.engine.execute(f"DELETE FROM `crop` WHERE `crop`.`id`={id}")
    flash(" Deleted Successful","danger")
    return redirect('/cropdetails')


@app.route("/edit/<string:id>",methods=['POST','GET'])
@login_required
def edit(id):
    dept=db.engine.execute("SELECT * FROM `fertilizer`")
    posts=Student.query.filter_by(id=id).first()
    if request.method=="POST":
        cropid=request.form.get('cropid')
        cropname=request.form.get('cropname')
        availability=request.form.get('availability')
        typr=request.form.get('type')
        fertilizer=request.form.get('fertilizer')
        email=request.form.get('email')
        num=request.form.get('num')
        address=request.form.get('address')
        query=db.engine.execute(f"UPDATE `crop` SET `cropid`='{cropid}',`cropname`='{cropname}',`availabiliy`='{availability}',`type`='{type}',`fertilizer`='{fertlizer}',`email`='{email}',`number`='{num}',`address`='{address}'")
        flash("Crop is Updated","success")
        return redirect('/cropdetails')
    
    return render_template('edit.html',posts=posts,dept=dept)


@app.route('/signup',methods=['POST','GET'])
def signup():
    if request.method == "POST":
        username=request.form.get('username')
        email=request.form.get('email')
        password=request.form.get('password')
        user=User.query.filter_by(email=email).first()
        if user:
            flash("Email Already Exist","warning")
            return render_template('/signup.html')
        encpassword=generate_password_hash(password)

        new_user=db.engine.execute(f"INSERT INTO `user` (`username`,`email`,`password`) VALUES ('{username}','{email}','{encpassword}')")

        # this is method 2 to save data in db
        # newuser=User(username=username,email=email,password=encpassword)
        # db.session.add(newuser)
        # db.session.commit()
        flash("Signup Succes Please Login","success")
        return render_template('login.html')

          

    return render_template('signup.html')

@app.route('/login',methods=['POST','GET'])
def login():
    if request.method == "POST":
        email=request.form.get('email')
        password=request.form.get('password')
        user=User.query.filter_by(email=email).first()

        if user and check_password_hash(user.password,password):
            login_user(user)
            flash("Login Success","primary")
            return redirect(url_for('index'))
        else:
            flash("invalid credentials","danger")
            return render_template('login.html')    

    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("Logout SuccessFul","warning")
    return redirect(url_for('login'))



@app.route('/addcrop',methods=['POST','GET'])
@login_required
def addcrop():
    fertilizer=db.engine.execute("SELECT * FROM `fertilizer`")
    if request.method=="POST":
        cropid=request.form.get('cropid')
        cropname=request.form.get('cropname')
        availability=request.form.get('availabilty')
        type=request.form.get('type')
        fertilizer=request.form.get('fertilizer')
        email=request.form.get('email')
        num=request.form.get('num')
        address=request.form.get('address')
        query=db.engine.execute(f"INSERT INTO `crop` (`cropid`,`cropname`,`availability`,`typr`,`fertilizer`,`email`,`number`,`address`) VALUES ('{cropid}','{cropname}','{availabilit}','{typr}','{fertilizer}','{email}','{num}','{address}')")
    

        flash("Booking Confirmed","info")


    return render_template('crop.html',dept=dept)
@app.route('/test')
def test():
    try:
        Test.query.all()
        return 'My database is Connected'
    except:
        return 'My db is not Connected'

          

app.run(debug=True)     